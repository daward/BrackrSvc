swagger: "2.0"
info:
  version: "0.0.1"
  title: Brackr
# during dev, should point to your local machine
host: brackr.us-west-2.elasticbeanstalk.com
# basePath prefixes all resource paths 
basePath: /
# 
schemes:
  # tip: remove http to make production-grade
  - http
  - https
# format of bodies a client can send (Content-Type)
consumes:
  - application/json
# format of the responses to the client (Accepts)
produces:
  - application/json
paths:
  /bracket:
    # binds a127 app logic to a route
    x-swagger-router-controller: bracket
    post:
      description: Creates a new bracket
      # used as the method name of the controller
      operationId: create
      parameters:
        - in: body
          name: bracketRequest
          description: definition of the bracket
          required: true
          schema:
            $ref: "#/definitions/CreateBracketRequest"
      responses:
        "200":
          description: Success
          schema:
            # a pointer to a definition
            $ref: "#/definitions/CreateBracketResponse"
  /bracket/{id}:
    x-swagger-router-controller: bracket
    get:
      description: Gets an existing bracket by id
      # used as the method name of the controller
      operationId: get
      parameters:
        - in: path
          name: id
          required: true
          type: string
      responses:
        "200":
          description: Success
          schema:
            # a pointer to a definition
            $ref: "#/definitions/CreateBracketResponse"
  /bracket/{id}/next:
    x-swagger-router-controller: bracket
    post:
      description: Re-runs the bracket to get the best remaining choice
      # used as the method name of the controller
      operationId: rerun
      parameters:
        - in: path
          name: id
          required: true
          type: string
      responses:
        "200":
          description: Success
          schema:
            # a pointer to a definition
            $ref: "#/definitions/CreateBracketResponse"
  /bracket/{id}/round/current:
    x-swagger-router-controller: bracket
    get:
      description: Gets an existing bracket by id
      # used as the method name of the controller
      operationId: currentRound
      parameters:
        - in: path
          name: id
          required: true
          type: string
      responses:
        "200":
          description: Success
          schema:
            $ref: '#/definitions/Round'
  /bracket/{id}/tournament/{tournamentId}:
    x-swagger-router-controller: bracket
    get:
      description: Gets an existing bracket by id
      # used as the method name of the controller
      operationId: getCompletedTournament
      parameters:
        - in: path
          name: id
          required: true
          type: string
        - in: path
          name: tournamentId
          required: true
          type: number
      responses:
        "200":
          description: Success
          schema:
            $ref: '#/definitions/Tournament'
  /bracket/{id}/round/next:
    x-swagger-router-controller: bracket
    post:
      description: Gets an existing bracket by id
      # used as the method name of the controller
      operationId: close
      parameters:
        - in: path
          name: id
          required: true
          type: string
      responses:
        "200":
          description: Success
  
  /bracket/{id}/match/{matchId}/player/{seed}:
    x-swagger-router-controller: bracket
    post:
      description: Gets an existing bracket by id
      # used as the method name of the controller
      operationId: vote
      parameters:
        - in: path
          name: id
          required: true
          type: string
        
        - in: path
          name: matchId
          required: true
          type: string
        
        - in: path
          name: seed
          required: true
          type: number
      responses:
        "200":
          description: Success
  /swagger:
    x-swagger-pipe: swagger_raw
# complex objects have schema definitions
definitions:
  Tournament:
    required:
      - rounds
    properties:
      rounds:
        type: array
        items:
          $ref: '#/definitions/CompletedRound'
  CompletedRound:
    required:
      - matches
    properties:
      matches:
        type: array
        items:
          $ref: '#/definitions/CompletedMatch'
  CompletedMatch:
    required:
      - winner
      - loser
    properties:
      winner:
        $ref: '#/definitions/Player'
      loser:
        $ref: '#/definitions/Player'

  Player:
    required:
      - data
      - seed
      - score
    properties:
      data:
        type: string
      seed:
        type: number
      score:
        type: number
  CreateBracketResponse:
    required:
      - id
    properties:
      id:
        type: string
      choices:
        type: array
        items:
          type: string
      title:
        type: string
      results:
        type: array
        items:
          type: string

  CreateBracketRequest:
    required:
      - choices
      - title
    properties:
      choices:
        type: array
        items:
          type: string
      title:
        type: string
  Round:
    required:
      - currentRound
      - totalRounds
      - matches
      - votingId
      - title
    properties:
      currentRound:
        type: number
      totalRounds:
        type: number
      votingId:
        type: string
      matches:
        type: array
        items:
          $ref: '#/definitions/Match'
      title:
        type: string
      results:
        type: array
        items:
          type: string
  Match:
    required:
      - id
      - players
    properties:
      id:
        type: string
      players:
        type: array
        items:
          $ref: '#/definitions/MatchPlayer'

  MatchPlayer:
    required:
      - seed
      - data
    properties:
      seed:
        type: number
      data:
        type: string